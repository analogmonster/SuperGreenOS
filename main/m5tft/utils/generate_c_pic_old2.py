#!/usr/bin/python3

import sys
import os
import argparse
import cairosvg
from PIL import Image
from io import BytesIO

def list_svg_files(directory):
	"""
	List all SVG files in the given directory.
	"""
	return [os.path.join(directory, f) for f in os.listdir(directory) if f.endswith('.svg')]

def get_filename_without_extension(filepath):
	"""
	Given a filepath, return the filename without its extension.
	"""
	return os.path.splitext(os.path.basename(filepath))[0]

def scale_image_to_max_size(image, max_width, max_height):
	"""
	Scale the image to fit within max_width and max_height, while preserving the aspect ratio.
	"""
	img_width, img_height = image.size
	img_ratio = img_width / img_height
	max_ratio = max_width / max_height

	# Compare the aspect ratios
	if img_ratio > max_ratio:
		# Image is wider than the desired ratio, so set width to max_width and scale height
		new_width = max_width
		new_height = int(new_width / img_ratio)
	else:
		# Image is taller or equal to the desired ratio, so set height to max_height and scale width
		new_height = max_height
		new_width = int(new_height * img_ratio)

	return image.resize((new_width, new_height), Image.Resampling.LANCZOS)

def svg_to_raster(input_svg):
	# Convert SVG to raster in memory (using BytesIO)
	output_buffer = BytesIO()
	cairosvg.svg2png(url=input_svg, write_to=output_buffer, output_width=None, output_height=None, dpi=300, parent_width=None, parent_height=None, scale=1)
	output_buffer.seek(0)

	# Use PIL to open the raster image
	return Image.open(output_buffer)

def generate_palette_and_bitmap(image):
	# image = handle_transparency(image)
	image = image.quantize(colors=16)
	image = image.convert("RGBA")
	
	# Getting all colors
	colors = list(image.getdata())
	unique_colors = list(set(colors))
	
	# Create a palette
	palette = {color: idx for idx, color in enumerate(unique_colors)}
	if len(palette) > 16:
		print(f"TOO MANY COLORS {len(palette)}")
		sys.exit()
	
	# Create a bitmap
	bitmap = [palette[color] for color in colors]
	
	return unique_colors, bitmap

def pack_bytes(byte_list):
    packed_list = []
    for i in range(0, len(byte_list), 2):
        if i + 1 < len(byte_list):
            second_byte = byte_list[i + 1]
        else:
            second_byte = 0

        packed_byte = (byte_list[i] << 4) + second_byte
        packed_list.append(packed_byte)

    return packed_list

def generate_c_code(palette, mask, bitmap, width, height, filename, var_index, prefix):
	palette_str = ",\n".join([f"{{ {color[0]}, {color[3]} }}" for color in palette])

	bitmap_str = ", ".join(map(str, pack_bytes(bitmap)))

	return f"""
bitmap_data {prefix}_{var_index}_{mask} = {{
	.mask = {mask},
	.palette = {{
		{palette_str}
	}},
	.bitmap = {{
		{bitmap_str}
	}},
	.width = {width},
	.height = {height},
	.name = "{filename}"
}};
"""

def main():
	# Setup command-line argument parsing
	parser = argparse.ArgumentParser(description="Convert SVG images to C code with a color palette.")
	parser.add_argument("directory", type=str, help="Path to the directory containing SVG files to convert.")
	parser.add_argument("output", type=str, help="Output files without extension")
	parser.add_argument("--max-width", type=int, default=160, help="Maximum width of the output raster image.")
	parser.add_argument("--max-height", type=int, default=80, help="Maximum height of the output raster image.")
	parser.add_argument("--grayscale", type=bool, default=False, help="Generate grayscale images")
	parser.add_argument("--mask", type=str, default="NORMAL_FONT_SIZE", help="Generate grayscale images")
	parser.add_argument("--prefix", type=str, default="bmp_db", help="Generate grayscale images")

	args = parser.parse_args()

	svg_files = list_svg_files(args.directory)
	
	i = 0
	pointHContent = f"""
// Generated by utils/generate_c_pic.py

#ifndef BITMAPS_DEFINITIONS
#define BITMAPS_DEFINITIONS

#include "bitmaps.h"

"""
	pointCContent = f"""
// Generated by utils/generate_c_pic.py

#include "bitmaps_definitions.h"

"""
	variablesDeclaration = "bitmap_data *bitmap_db[] = { "
	for svg_file in svg_files:
		image = svg_to_raster(svg_file)
		if args.grayscale:
			image = image.convert('L')
		image.save(f"{svg_file}.png")
		image = scale_image_to_max_size(image, args.max_width, args.max_height)
		image.save(f"{svg_file}_resized.png")
		palette, bitmap = generate_palette_and_bitmap(image)
		filename_no_ext = get_filename_without_extension(svg_file)
		pointHContent += f"extern bitmap_data {args.prefix}_{i}_{args.mask};\n";
		pointCContent += generate_c_code(palette, args.mask, bitmap, image.width, image.height, filename_no_ext, i, args.prefix)
		variablesDeclaration += f"&{args.prefix}_{i}_{args.mask}, "
		i += 1

	variablesDeclaration += "};"
	pointCContent += variablesDeclaration
	pointCContent += f"""

int n_bitmaps = {i};
"""

	pointHContent += """

extern int n_bitmaps;
extern bitmap_data *bitmap_db[];

#endif
"""

	print(pointCContent)
	print(pointHContent)

	with open(f'{args.output}.c', 'w') as file:
		file.write(pointCContent)

	with open(f'{args.output}.h', 'w') as file:
		file.write(pointHContent)

if __name__ == "__main__":
	main()
