/*
 * Copyright (C) 2019  SuperGreenLab <towelie@supergreenlab.com>
 * Author: Constantin Clauzel <constantin.clauzel@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <stdlib.h>
#include <string.h>

#include "../kv/kv.h"
#include "../kv/kv_helpers_internal.h"
#include "kv_mapping.h"
#include "../include_modules.h"

const kvi8_mapping kvi8_mappings[] = {
/*
* [GENERATED]
*/
  
<% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].disabled && modules[m].fields[f].type == 'integer' && modules[m].fields[f].intlen == 8 && modules[m].fields[f].signedness == '').forEach(f => { f = modules[m].fields[f]%>
  {
    .remote = <%= f.remote %>,
    .name = "<%= f.caps_name %>",
    <% if (f.http.write) { %>
      .setter = internal_set_<%= f.name %>,
    <% } else { %>
      .setter = NULL,
    <% } %>
    <% if (f.http.read) { %>
      .getter = get_<%= f.name %>,
    <% } else { %>
      .getter = NULL,
    <% } %>
  },
<% })}) %>

/*
* [/GENERATED]
*/
  {
    .name = NULL,
    .setter = NULL,
  },
};

const kvi8_mapping *get_kvi8_mapping(const char *name, bool remote) {
  for (int i = 0; kvi8_mappings[i].name != NULL; ++i) {
    if (strcmp(kvi8_mappings[i].name, name) == 0) {
      if (remote && kvi8_mappings[i].remote == false) {
        return NULL;
      }
      return &kvi8_mappings[i];
    }
  }
  return NULL;
}

const kvui8_mapping kvui8_mappings[] = {
/*
* [GENERATED]
*/
  
<% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].disabled && modules[m].fields[f].type == 'integer' && modules[m].fields[f].intlen == 8 && modules[m].fields[f].signedness == 'u').forEach(f => { f = modules[m].fields[f]%>
  {
    .remote = <%= f.remote %>,
    .name = "<%= f.caps_name %>",
    <% if (f.http.write) { %>
      .setter = internal_set_<%= f.name %>,
    <% } else { %>
      .setter = NULL,
    <% } %>
    <% if (f.http.read) { %>
      .getter = get_<%= f.name %>,
    <% } else { %>
      .getter = NULL,
    <% } %>
  },
<% })}) %>

/*
* [/GENERATED]
*/
  {
    .name = NULL,
    .setter = NULL,
  },
};

const kvui8_mapping *get_kvui8_mapping(const char *name, bool remote) {
  for (int i = 0; kvui8_mappings[i].name != NULL; ++i) {
    if (strcmp(kvui8_mappings[i].name, name) == 0) {
      if (remote && kvui8_mappings[i].remote == false) {
        return NULL;
      }
      return &kvui8_mappings[i];
    }
  }
  return NULL;
}



const kvi16_mapping kvi16_mappings[] = {
/*
* [GENERATED]
*/

 <% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].disabled && modules[m].fields[f].type == 'integer' && modules[m].fields[f].intlen == 16 && modules[m].fields[f].signedness == '').forEach(f => { f = modules[m].fields[f]%>
  {
    .remote = <%= f.remote %>,
    .name = "<%= f.caps_name %>",
    <% if (f.http.write) { %>
      .setter = internal_set_<%= f.name %>,
    <% } else { %>
      .setter = NULL,
    <% } %>
    <% if (f.http.read) { %>
      .getter = get_<%= f.name %>,
    <% } else { %>
      .getter = NULL,
    <% } %>
  },
<% })}) %>

/*
* [/GENERATED]
*/
  {
    .name = NULL,
    .setter = NULL,
  },
};

const kvi16_mapping *get_kvi16_mapping(const char *name, bool remote) {
  for (int i = 0; kvi16_mappings[i].name != NULL; ++i) {
    if (strcmp(kvi16_mappings[i].name, name) == 0) {
      if (remote && kvi16_mappings[i].remote == false) {
        return NULL;
      }

      return &kvi16_mappings[i];
    }
  }
  return NULL;
}

const kvui16_mapping kvui16_mappings[] = {
/*
* [GENERATED]
*/

 <% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].disabled && modules[m].fields[f].type == 'integer' && modules[m].fields[f].intlen == 16 && modules[m].fields[f].signedness == 'u').forEach(f => { f = modules[m].fields[f]%>
  {
    .remote = <%= f.remote %>,
    .name = "<%= f.caps_name %>",
    <% if (f.http.write) { %>
      .setter = internal_set_<%= f.name %>,
    <% } else { %>
      .setter = NULL,
    <% } %>
    <% if (f.http.read) { %>
      .getter = get_<%= f.name %>,
    <% } else { %>
      .getter = NULL,
    <% } %>

  },
<% })}) %>

/*
* [/GENERATED]
*/
  {
    .name = NULL,
    .setter = NULL,
  },
};

const kvui16_mapping *get_kvui16_mapping(const char *name, bool remote) {
  for (int i = 0; kvui16_mappings[i].name != NULL; ++i) {
    if (strcmp(kvui16_mappings[i].name, name) == 0) {
      if (remote && kvui16_mappings[i].remote == false) {
        return NULL;
      }
      return &kvui16_mappings[i];
    }
  }
  return NULL;
}


const kvi32_mapping kvi32_mappings[] = {
/*
* [GENERATED]
*/

 <% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].disabled && modules[m].fields[f].type == 'integer' && modules[m].fields[f].intlen == 32 && modules[m].fields[f].signedness == '').forEach(f => { f = modules[m].fields[f]%>
  {
    .remote = <%= f.remote %>,
    .name = "<%= f.caps_name %>",
    <% if (f.http.write) { %>
      .setter = internal_set_<%= f.name %>,
    <% } else { %>
      .setter = NULL,
    <% } %>
    <% if (f.http.read) { %>
      .getter = get_<%= f.name %>,
    <% } else { %>
      .getter = NULL,
    <% } %>
  },
<% })}) %>

/*
* [/GENERATED]
*/
  {
    .remote = false,
    .name = NULL,
    .setter = NULL,
  },
};

const kvi32_mapping *get_kvi32_mapping(const char *name, bool remote) {
  for (int i = 0; kvi32_mappings[i].name != NULL; ++i) {
    if (strcmp(kvi32_mappings[i].name, name) == 0) {
      if (remote && kvi32_mappings[i].remote == false) {
        return NULL;
      }
      return &kvi32_mappings[i];
    }
  }
  return NULL;
}

const kvui32_mapping kvui32_mappings[] = {
/*
* [GENERATED]
*/

 <% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].disabled && modules[m].fields[f].type == 'integer' && modules[m].fields[f].intlen == 32 && modules[m].fields[f].signedness == 'u').forEach(f => { f = modules[m].fields[f]%>
  {
    .remote = <%= f.remote %>,
    .name = "<%= f.caps_name %>",
    <% if (f.http.write) { %>
      .setter = internal_set_<%= f.name %>,
    <% } else { %>
      .setter = NULL,
    <% } %>
    <% if (f.http.read) { %>
      .getter = get_<%= f.name %>,
    <% } else { %>
      .getter = NULL,
    <% } %>
  },
<% })}) %>

/*
* [/GENERATED]
*/
  {
    .remote = true,
    .name = NULL,
    .setter = NULL,
  },
};

const kvui32_mapping *get_kvui32_mapping(const char *name, bool remote) {
  for (int i = 0; kvui32_mappings[i].name != NULL; ++i) {
    if (strcmp(kvui32_mappings[i].name, name) == 0) {
      if (remote && kvui32_mappings[i].remote == false) {
        return NULL;
      }
      return &kvui32_mappings[i];
    }
  }
  return NULL;
}

const kvs_mapping kvs_mappings[] = {
/*
* [GENERATED]
*/

<% Object.keys(modules).filter(m => modules[m].enabled).forEach(m => {
  Object.keys(modules[m].fields).filter(f => !modules[m].fields[f].disabled && modules[m].fields[f].type == 'string').forEach(f => { f = modules[m].fields[f]%>
  {
    .remote = <%= f.remote %>,
    .name = "<%= f.caps_name %>",
    <% if (f.http.write) { %>
    .setter = internal_set_<%= f.name %>,
    <% } else { %>
    .setter = NULL,
    <% } %>
    <% if (f.http.read) { %>
      .getter = get_<%= f.name %>,
    <% } else { %>
      .getter = NULL,
    <% } %>
  },
<% })}) %>

/*
* [/GENERATED]
*/
  {
    .remote = true,
    .name = NULL,
    .setter = NULL,
  }
};

const kvs_mapping *get_kvs_mapping(const char *name, bool remote) {
  for (int i = 0; kvs_mappings[i].name != NULL; ++i) {
    if (strcmp(kvs_mappings[i].name, name) == 0) {
      if (remote && kvs_mappings[i].remote == false) {
        return NULL;
      }
      return &kvs_mappings[i];
    }
  }
  return NULL;
}
